# Generated by Django 5.1.1 on 2024-10-09 06:19
from django import forms
from django.db import migrations
from typing import TYPE_CHECKING
from country_workspace.constants import HOUSEHOLD_CHECKER_NAME, INDIVIDUAL_CHECKER_NAME
from django.utils.text import slugify

if TYPE_CHECKING:
    from hope_flex_fields.models import FieldDefinition, Fieldset, DataChecker
    from django.contrib.contenttypes.models import ContentType


def removes_hope_field_definitions(apps, schema_editor):
    fd: "FieldDefinition" = apps.get_model("hope_flex_fields", "FieldDefinition")
    fd.objects.filter(name__startswith="HOPE ").delete()


def create_hope_field_definitions(apps, schema_editor):
    ct: "ContentType" = apps.get_model("contenttypes", "ContentType")
    fd: "FieldDefinition" = apps.get_model("hope_flex_fields", "FieldDefinition")

    for m in ["ResidenceStatus", "Relationship", "Role", "MaritalStatus", "ObservedDisability"]:
        r = apps.get_model("country_workspace", m)
        n = f"HOPE HH {m}"
        fd.objects.create(name=n,
                          slug=slugify(n),
                          field_type=forms.ChoiceField,
                          content_type=ct.objects.get_for_model(r),
                          )
    fd.objects.get_or_create(
        name="HOPE IND Gender",
        slug=slugify("HOPE IND Gender"),
        attrs={"choices": [["FEMALE", "FEMALE"], ["MALE", "MALE"], ["UNKNOWN", "UNKNOWN"]]},
        field_type=forms.ChoiceField,
    )
    fd.objects.get_or_create(
        name="HOPE IND Disability",
        slug=slugify("HOPE IND Disability"),
        field_type=forms.ChoiceField,
        attrs={
            "choices": [["not disabled", "not disabled"], ["disabled", "disabled"]]
        },
    )


def create_hope_core_fieldset(apps, schema_editor):
    dc: "DataChecker" = apps.get_model("hope_flex_fields", "DataChecker")
    fs: "Fieldset" = apps.get_model("hope_flex_fields", "Fieldset")
    fd: "FieldDefinition" = apps.get_model("hope_flex_fields", "FieldDefinition")

    _cf = fd.objects.get(field_type=forms.CharField)
    _df = fd.objects.get(field_type=forms.DateField)
    _bf = fd.objects.get(field_type=forms.BooleanField)
    _if = fd.objects.get(field_type=forms.IntegerField)

    _hr = fd.objects.get(slug="hope-hh-relationship")
    _hg = fd.objects.get(slug="hope-ind-gender")
    _hd = fd.objects.get(slug="hope-ind-disability")

    hh_fs, __ = fs.objects.get_or_create(name=HOUSEHOLD_CHECKER_NAME)
    hh_fs.fields.get_or_create(field=_cf, name="household_id")
    hh_fs.fields.get_or_create(field=_bf, name="consent_h_c", attrs={"required": False})
    hh_fs.fields.get_or_create(field=_cf, name="country_origin_h_c")
    hh_fs.fields.get_or_create(field=_cf, name="admin1_h_c")
    hh_fs.fields.get_or_create(field=_cf, name="admin2_h_c")
    hh_fs.fields.get_or_create(field=_if, name="size_h_c")
    hh_fs.fields.get_or_create(field=_cf, name="admin1_h_c")
    hh_fs.fields.get_or_create(field=_bf, name="hh_latrine_h_f")
    hh_fs.fields.get_or_create(field=_bf, name="hh_electricity_h_f")
    hh_fs.fields.get_or_create(field=_cf, name="registration_method_h_c")
    hh_fs.fields.get_or_create(field=_bf, name="collect_individual_data_h_c")
    hh_fs.fields.get_or_create(field=_cf, name="name_enumerator_h_c")
    hh_fs.fields.get_or_create(field=_cf, name="org_enumerator_h_c")
    hh_fs.fields.get_or_create(field=_bf, name="consent_sharing_h_c")
    hh_fs.fields.get_or_create(field=_df, name="first_registration_date_h_c")

    ind_fs, __ = fs.objects.get_or_create(name="HOPE individual core")
    ind_fs.fields.get_or_create(field=_cf, name="household_id")
    ind_fs.fields.get_or_create(field=_hr, name="relationship_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="full_name_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="given_name_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="middle_name_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="family_name_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="photo_i_c")
    ind_fs.fields.get_or_create(field=_hg, name="gender_i_c")
    ind_fs.fields.get_or_create(field=_df, name="birth_date_i_c")
    ind_fs.fields.get_or_create(field=_bf, name="estimated_birth_date_i_c", attrs={"required": False})
    ind_fs.fields.get_or_create(field=_cf, name="national_id_no_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="national_id_photo_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="national_id_issuer_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="phone_no_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="primary_collector_id")
    ind_fs.fields.get_or_create(field=_cf, name="alternate_collector_id")
    ind_fs.fields.get_or_create(field=_df, name="first_registration_date_i_c")
    ind_fs.fields.get_or_create(field=_hd, name="disability_i_c")
    ind_fs.fields.get_or_create(field=_cf, name="alternate_collector_id")

    hh_dc, __ = dc.objects.get_or_create(name=HOUSEHOLD_CHECKER_NAME)
    hh_dc.fieldsets.add(hh_fs)
    ind_dc, __ = dc.objects.get_or_create(name=INDIVIDUAL_CHECKER_NAME)
    ind_dc.fieldsets.add(ind_fs)


def removes_hope_core_fieldset(apps, schema_editor):
    fs: "Fieldset" = apps.get_model("hope_flex_fields", "Fieldset")
    dc: "DataChecker" = apps.get_model("hope_flex_fields", "DataChecker")

    fs.objects.filter(name=INDIVIDUAL_CHECKER_NAME).delete()
    dc.objects.filter(name=INDIVIDUAL_CHECKER_NAME).delete()
    dc.objects.filter(name=HOUSEHOLD_CHECKER_NAME).delete()
    fs.objects.filter(name=HOUSEHOLD_CHECKER_NAME).delete()


class Migration(migrations.Migration):
    dependencies = [("hope_flex_fields", "0007_create_default_fields"),
                    ]

    operations = [
        migrations.RunPython(create_hope_field_definitions, removes_hope_field_definitions),
        migrations.RunPython(create_hope_core_fieldset, removes_hope_core_fieldset)

    ]
